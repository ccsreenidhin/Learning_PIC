CCS PCM C Compiler, Version 4.057, 17685               26-Nov-14 11:30

               Filename: E:\JIJU\pic c\lcd\main.lst

               ROM used: 260 words (6%)
                         Largest free fragment is 2048
               RAM used: 6 (3%) at main() level
                         16 (8%) worst case
               Stack:    3 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0D1
0003:  NOP
.................... #include "E:\JIJU\pic c\lcd\main.h" 
.................... #include <16F73.h> 
.................... //////// Standard Header file for the PIC16F73 device //////////////// 
.................... #device PIC16F73 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES XT                    	//Crystal osc <= 4mhz 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
....................  
.................... #use delay(clock=4000000) 
0016:  MOVLW  28
0017:  MOVWF  04
0018:  MOVF   00,W
0019:  BTFSC  03.2
001A:  GOTO   029
001B:  MOVLW  01
001C:  MOVWF  21
001D:  CLRF   20
001E:  DECFSZ 20,F
001F:  GOTO   01E
0020:  DECFSZ 21,F
0021:  GOTO   01D
0022:  MOVLW  4A
0023:  MOVWF  20
0024:  DECFSZ 20,F
0025:  GOTO   024
0026:  GOTO   027
0027:  DECFSZ 00,F
0028:  GOTO   01B
0029:  RETLW  00
....................  
....................  
....................  
....................  
.................... #define LCD_TYPE 2 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
....................  #define use_portc_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................                      // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw; 
....................            BOOLEAN enable; // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
....................  
.................... #if defined use_portc_lcd 
....................    //#locate lcd = getenv("sfr:PORTB")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf81 
....................    #else 
....................     #locate lcd = 7 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_c(x) 
.................... #else 
....................    //#locate lcd = getenv("sfr:PORTD")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf83 
....................    #else 
....................     #locate lcd = 8 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... #ifndef lcd_type 
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
0037:  MOVLW  F0
0038:  BSF    03.5
0039:  MOVWF  07
....................       lcd.rw = 1; 
003A:  BCF    03.5
003B:  BSF    07.1
....................       delay_cycles(1); 
003C:  NOP
....................       lcd.enable = 1; 
003D:  BSF    07.2
....................       delay_cycles(1); 
003E:  NOP
....................       high = lcd.data; 
003F:  MOVF   07,W
0040:  SWAPF  07,W
0041:  ANDLW  0F
0042:  MOVWF  2F
....................       lcd.enable = 0; 
0043:  BCF    07.2
....................       delay_cycles(1); 
0044:  NOP
....................       lcd.enable = 1; 
0045:  BSF    07.2
....................       delay_us(1); 
0046:  NOP
....................       low = lcd.data; 
0047:  MOVF   07,W
0048:  SWAPF  07,W
0049:  ANDLW  0F
004A:  MOVWF  2E
....................       lcd.enable = 0; 
004B:  BCF    07.2
....................       set_tris_lcd(LCD_WRITE); 
004C:  MOVLW  00
004D:  BSF    03.5
004E:  MOVWF  07
....................       return( (high<<4) | low); 
004F:  BCF    03.5
0050:  SWAPF  2F,W
0051:  MOVWF  20
0052:  MOVLW  F0
0053:  ANDWF  20,F
0054:  MOVF   20,W
0055:  IORWF  2E,W
0056:  MOVWF  21
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
002A:  SWAPF  2F,W
002B:  ANDLW  F0
002C:  MOVWF  20
002D:  MOVLW  0F
002E:  ANDWF  07,W
002F:  IORWF  20,W
0030:  MOVWF  07
....................       delay_cycles(1); 
0031:  NOP
....................       lcd.enable = 1; 
0032:  BSF    07.2
....................       delay_us(2); 
0033:  GOTO   034
....................       lcd.enable = 0; 
0034:  BCF    07.2
.................... } 
0035:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0036:  BCF    07.0
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
0057:  MOVF   21,W
0058:  MOVWF  2E
0059:  BTFSC  2E.7
005A:  GOTO   037
....................       lcd.rs = address; 
005B:  BTFSS  2C.0
005C:  BCF    07.0
005D:  BTFSC  2C.0
005E:  BSF    07.0
....................       delay_cycles(1); 
005F:  NOP
....................       lcd.rw = 0; 
0060:  BCF    07.1
....................       delay_cycles(1); 
0061:  NOP
....................       lcd.enable = 0; 
0062:  BCF    07.2
....................       lcd_send_nibble(n >> 4); 
0063:  SWAPF  2D,W
0064:  MOVWF  2E
0065:  MOVLW  0F
0066:  ANDWF  2E,F
0067:  MOVF   2E,W
0068:  MOVWF  2F
0069:  CALL   02A
....................       lcd_send_nibble(n & 0xf); 
006A:  MOVF   2D,W
006B:  ANDLW  0F
006C:  MOVWF  2E
006D:  MOVWF  2F
006E:  CALL   02A
.................... } 
006F:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
0070:  MOVLW  00
0071:  BSF    03.5
0072:  MOVWF  07
....................     lcd.rs = 0; 
0073:  BCF    03.5
0074:  BCF    07.0
....................     lcd.rw = 0; 
0075:  BCF    07.1
....................     lcd.enable = 0; 
0076:  BCF    07.2
....................     delay_ms(15); 
0077:  MOVLW  0F
0078:  MOVWF  28
0079:  CALL   016
....................     for(i=1;i<=3;++i) { 
007A:  MOVLW  01
007B:  MOVWF  26
007C:  MOVF   26,W
007D:  SUBLW  03
007E:  BTFSS  03.0
007F:  GOTO   088
....................        lcd_send_nibble(3); 
0080:  MOVLW  03
0081:  MOVWF  2F
0082:  CALL   02A
....................        delay_ms(5); 
0083:  MOVLW  05
0084:  MOVWF  28
0085:  CALL   016
....................     } 
0086:  INCF   26,F
0087:  GOTO   07C
....................     lcd_send_nibble(2); 
0088:  MOVLW  02
0089:  MOVWF  2F
008A:  CALL   02A
....................     for(i=0;i<=3;++i) 
008B:  CLRF   26
008C:  MOVF   26,W
008D:  SUBLW  03
008E:  BTFSS  03.0
008F:  GOTO   099
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
0090:  MOVF   26,W
0091:  CALL   004
0092:  MOVWF  27
0093:  CLRF   2C
0094:  MOVF   27,W
0095:  MOVWF  2D
0096:  CALL   036
0097:  INCF   26,F
0098:  GOTO   08C
.................... } 
0099:  BCF    0A.3
009A:  GOTO   0DA (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
00B2:  DECFSZ 29,W
00B3:  GOTO   0B5
00B4:  GOTO   0B8
....................      address=lcd_line_two; 
00B5:  MOVLW  40
00B6:  MOVWF  2A
....................    else 
00B7:  GOTO   0B9
....................      address=0; 
00B8:  CLRF   2A
....................    address+=x-1; 
00B9:  MOVLW  01
00BA:  SUBWF  28,W
00BB:  ADDWF  2A,F
....................    lcd_send_byte(0,0x80|address); 
00BC:  MOVF   2A,W
00BD:  IORLW  80
00BE:  MOVWF  2B
00BF:  CLRF   2C
00C0:  MOVF   2B,W
00C1:  MOVWF  2D
00C2:  CALL   036
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
009B:  MOVF   27,W
009C:  XORLW  0C
009D:  BTFSC  03.2
009E:  GOTO   0A6
009F:  XORLW  06
00A0:  BTFSC  03.2
00A1:  GOTO   0AE
00A2:  XORLW  02
00A3:  BTFSC  03.2
00A4:  GOTO   0C4
00A5:  GOTO   0C9
....................      case '\f'   : lcd_send_byte(0,1); 
00A6:  CLRF   2C
00A7:  MOVLW  01
00A8:  MOVWF  2D
00A9:  CALL   036
....................                    delay_ms(2); 
00AA:  MOVLW  02
00AB:  MOVWF  28
00AC:  CALL   016
....................                                            break; 
00AD:  GOTO   0CF
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
00AE:  MOVLW  01
00AF:  MOVWF  28
00B0:  MOVLW  02
00B1:  MOVWF  29
*
00C3:  GOTO   0CF
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
00C4:  CLRF   2C
00C5:  MOVLW  10
00C6:  MOVWF  2D
00C7:  CALL   036
00C8:  GOTO   0CF
....................      default     : lcd_send_byte(1,c);     break; 
00C9:  MOVLW  01
00CA:  MOVWF  2C
00CB:  MOVF   27,W
00CC:  MOVWF  2D
00CD:  CALL   036
00CE:  GOTO   0CF
....................    } 
.................... } 
00CF:  BCF    0A.3
00D0:  GOTO   101 (RETURN)
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
.................... void lcd_puts(char *a) 
.................... { 
.................... while(*a) 
.................... lcd_putc(*a++); 
.................... } 
....................  
.................... void main() 
.................... { 
00D1:  CLRF   04
00D2:  MOVLW  1F
00D3:  ANDWF  03,F
00D4:  BSF    03.5
00D5:  BSF    1F.0
00D6:  BSF    1F.1
00D7:  BSF    1F.2
....................    lcd_init(); 
00D8:  BCF    03.5
00D9:  GOTO   070
....................  
....................  
....................  
....................    setup_adc_ports(NO_ANALOGS); 
00DA:  BSF    03.5
00DB:  BSF    1F.0
00DC:  BSF    1F.1
00DD:  BSF    1F.2
....................    setup_adc(ADC_OFF); 
00DE:  BCF    03.5
00DF:  BCF    1F.0
....................    setup_spi(SPI_SS_DISABLED); 
00E0:  BCF    14.5
00E1:  BSF    03.5
00E2:  BCF    07.5
00E3:  BSF    07.4
00E4:  BCF    07.3
00E5:  MOVLW  01
00E6:  BCF    03.5
00E7:  MOVWF  14
00E8:  MOVLW  00
00E9:  BSF    03.5
00EA:  MOVWF  14
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
00EB:  MOVF   01,W
00EC:  ANDLW  C7
00ED:  IORLW  08
00EE:  MOVWF  01
....................    setup_timer_1(T1_DISABLED); 
00EF:  BCF    03.5
00F0:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
00F1:  MOVLW  00
00F2:  MOVWF  21
00F3:  MOVWF  12
00F4:  MOVLW  00
00F5:  BSF    03.5
00F6:  MOVWF  12
....................  
....................    // TODO: USER CODE!! 
.................... lcd_putc("hello"); 
00F7:  BCF    03.5
00F8:  CLRF   26
00F9:  MOVF   26,W
00FA:  CALL   00C
00FB:  IORLW  00
00FC:  BTFSC  03.2
00FD:  GOTO   102
00FE:  INCF   26,F
00FF:  MOVWF  27
0100:  GOTO   09B
0101:  GOTO   0F9
.................... while(1); 
0102:  GOTO   102
.................... } 
0103:  SLEEP

Configuration Fuses:
   Word  1: 3FB9   XT NOWDT NOPUT NOPROTECT NOBROWNOUT
